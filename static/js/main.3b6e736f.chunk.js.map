{"version":3,"sources":["constants/routes.ts","config.ts","utils/history.ts","services/survey.ts","components/customSurvey/index.tsx","components/customSurvey/customSurvey.tsx","components/surveyBuilder/components/types/SelectBuilder.tsx","components/surveyBuilder/components/types/TextAreaBuilder.tsx","components/surveyBuilder/components/types/MultipleChoiceBuilder.tsx","components/surveyBuilder/components/QuestionDetail.tsx","components/surveyBuilder/components/Question.tsx","components/surveyBuilder/components/SurveyQuestions.tsx","components/surveyBuilder/components/SurveyBuilderWrapper.tsx","components/surveyBuilder/index.tsx","components/surveyBuilder/SurveyBuilder.tsx","components/Router.tsx","components/constants/navbar/index.tsx","components/constants/navbar/NavBar.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["BUILDER","config","env","process","basename","REACT_APP_BASE_NAME","baseURI","REACT_APP_API_BASE_URI","createBrowserHistory","fetchSurveyQuestions","id","surveyQuestions","Promise","resolve","reject","setTimeout","CustomSurvey","useState","isLoading","setIsLoading","surveyQuestion","setSurveyQuestion","useEffect","a","surveyJson","console","error","json","onComplete","data","log","SelectBuilder","TextAreaBuilder","disabled","MultipleChoiceBuilder","QuestionDetail","props","question","type","Question","handleQuestionRemove","questionType","setQuestionType","defaultValue","onChange","e","target","value","onClick","preventDefault","SurveyQuestions","questions","onQuestionChange","questionsState","setQuestionsState","questionIndex","setquestionIndex","defaultQuestion","label","isRequired","current","index","indexOf","splice","push","map","SurveyBuilderWrapper","initialValues","isSubmitting","setFieldValue","onValueChange","name","placeholder","title","startDate","endDate","handleSubmit","SurveyBuilder","onSubmit","values","setSubmitting","JSON","stringify","formikProps","Router","history","exact","path","routes","component","NavBar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b6e736f.chunk.js","sourcesContent":["export const HOME = '/';\n\nexport const BUILDER = '/builder';\n","/**\n * Application wide configuration.\n */\nconst config = {\n    env: process.env.NODE_ENV,\n    basename: process.env.REACT_APP_BASE_NAME || '/',\n    baseURI: process.env.REACT_APP_API_BASE_URI\n};\n\nexport default config;\n","import { createBrowserHistory } from 'history';\n\nimport config from '../config';\n\nexport default createBrowserHistory({ basename: config.basename });\n","import http from '../utils/http'\n\nexport const fetchSurveyQuestions = (id: number) => {\n    // http.get('/survey')\n\n    const surveyQuestions = {\n        \"completedHtml\": \"<h3>Thank you for your feedback.</h3> <h5>Your thoughts and ideas will help us to create a great product!</h5>\",\n        \"completedHtmlOnCondition\": [\n            {\n                \"expression\": \"{nps_score} > 8\",\n                \"html\": \"<h3>Thank you for your feedback.</h3> <h5>We glad that you love our product. Your ideas and suggestions will help us to make our product even better!</h5>\"\n            }, {\n                \"expression\": \"{nps_score} < 7\",\n                \"html\": \"<h3>Thank you for your feedback.</h3> <h5> We are glad that you share with us your ideas.We highly value all suggestions from our customers. We do our best to improve the product and reach your expectation.</h5><br/>\"\n            }\n        ],\n        \"header\": \"Please fill out this survey\",\n        \"pages\": [\n            {\n                \"name\": \"page1\",\n                \"elements\": [\n                    {\n                        \"type\": \"rating\",\n                        \"name\": \"nps_score\",\n                        \"title\": \"On a scale of zero to ten, how likely are you to recommend our product to a friend or colleague?\",\n                        \"isRequired\": true,\n                        \"rateMin\": 0,\n                        \"rateMax\": 10,\n                        \"minRateDescription\": \"(Most unlikely)\",\n                        \"maxRateDescription\": \"(Most likely)\"\n                    }, {\n                        \"type\": \"checkbox\",\n                        \"name\": \"promoter_features\",\n                        // \"visibleIf\": \"{nps_score} >= 9\",\n                        \"title\": \"What features do you value the most?\",\n                        \"isRequired\": true,\n                        \"validators\": [\n                            {\n                                \"type\": \"answercount\",\n                                \"text\": \"Please select two features maximum.\",\n                                \"maxCount\": 2\n                            }\n                        ],\n                        \"hasOther\": true,\n                        \"choices\": [\n                            \"Performance\", \"Stability\", \"User Interface\", \"Complete Functionality\"\n                        ],\n                        \"otherText\": \"Other feature:\",\n                        \"colCount\": 2\n                    }, {\n                        \"type\": \"comment\",\n                        \"name\": \"passive_experience\",\n                        \"visibleIf\": \"{nps_score} > 6  and {nps_score} < 9\",\n                        \"title\": \"What is the primary reason for your score?\"\n                    }, {\n                        \"type\": \"comment\",\n                        \"name\": \"disappointed_experience\",\n                        \"visibleIf\": \"{nps_score} notempty\",\n                        \"title\": \"What do you miss and what was disappointing in your experience with us?\"\n                    }\n                ]\n            }\n        ],\n        \"showQuestionNumbers\": \"off\"\n    };\n\n    // return surveyQuestions;\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            resolve(surveyQuestions)\n        },1000)\n    });\n}\n","import CustomSurvey from './customSurvey';\n\nexport default CustomSurvey;","import React, {useEffect, useState} from 'react';\nimport { Survey } from 'survey-react';\n\nimport { fetchSurveyQuestions } from 'services/survey';\n\nconst CustomSurvey = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [surveyQuestion, setSurveyQuestion] = useState({});\n\n    useEffect(() => {\n        setIsLoading(true);\n        (async function() {\n            try {\n                const surveyJson:any = await fetchSurveyQuestions(1);\n                setSurveyQuestion(surveyJson);\n            } catch (e) {\n                console.error(e);\n            }finally {\n                setIsLoading(false);\n            }\n        })();\n    }, []);\n\n    const complete = (data: any) => {\n        console.log(data);\n        console.log(data.data);\n    }\n\n    return (\n        <>\n            {isLoading ? (<div>Loading...</div>):<Survey json={surveyQuestion} onComplete={complete} /> }\n            {/* <Survey json={surveyQuestion} onComplete={complete} /> */}\n            \n            Das ist Survey\n        </>\n    )\n};\n\nexport default CustomSurvey;","const SelectBuilder = () => {\n    return (\n        <>\n            Selection Section will be here\n        </>\n    )\n}\n\nexport default SelectBuilder;\n","const TextAreaBuilder = () => {\n    return (\n        <textarea disabled={true}>User will input the value here</textarea>\n    )\n}\n\nexport default TextAreaBuilder;\n","const MultipleChoiceBuilder = () => {\n    return (\n        <>\n            Multiple Choice options here\n        </>\n    )\n}\n\nexport default MultipleChoiceBuilder;\n","import SelectBuilder from './types/SelectBuilder';\nimport TextAreaBuilder from './types/TextAreaBuilder';\nimport MultipleChoiceBuilder from './types/MultipleChoiceBuilder';\n\nconst QuestionDetail = (props: any) => {\n    const { question } = props;\n    return (<>\n        {question.type === 'text' && <TextAreaBuilder />}\n        {question.type === 'select' && <SelectBuilder />}\n        {question.type === 'multipleChoice' && <MultipleChoiceBuilder />}\n    </>)\n}\n\nexport default QuestionDetail;\n","import { MouseEvent, useState } from 'react';\nimport QuestionDetail from './QuestionDetail';\n\nconst Question = (props: any) => {\n    const { question, handleQuestionRemove } = props;\n    const [questionType, setQuestionType] = useState(question.type || 'text');\n\n    return (<p>\n        Question :\n        <input defaultValue={question.question} onChange={(e) => question.question = e.target.value} />\n        <br />\n        Type:\n        <select defaultValue={questionType} onChange={(e) => {\n            setQuestionType(e.target.value);\n            question.type = e.target.value;\n        }}>\n            <option value=\"text\">Text</option>\n            <option value=\"select\">Select</option>\n            <option value=\"multipleChoice\">Multiple Choice</option>\n\n        </select>\n        <br />\n        <QuestionDetail question={question} />\n        <br />\n        <button onClick={(e: MouseEvent<HTMLElement>) => {\n            e.preventDefault();\n            handleQuestionRemove(question)\n        }\n        }>Delete</button>\n    </p>)\n}\n\nexport default Question;","import { MouseEvent, useState } from 'react';\nimport Question from './Question';\n\nconst SurveyQuestions = (props: any) => {\n    const { questions, onQuestionChange } = props;\n    const [questionsState,setQuestionsState] = useState(questions||[]);\n    const [questionIndex, setquestionIndex] = useState(0);\n\n    const defaultQuestion = {\n        question: 'Is this it',\n        label: '',\n        type: 'text',\n        data: {},\n        isRequired: false,\n    }\n\n    const generateDefaultQuestion = () => {\n        return {id: questionIndex, ...defaultQuestion};\n    }\n\n    const handleQuestionAdd = (e: MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n        const current = [...questionsState];\n        setquestionIndex(questionIndex+1);\n        current.push(generateDefaultQuestion());\n        onQuestionChange(current);\n        setQuestionsState(current);\n    }\n\n    const handleQuestionRemove = (value: number) => {\n        const current = [...questionsState];\n        const index = current.indexOf(value);\n        current.splice(index, 1);\n        onQuestionChange(current);\n        setQuestionsState(current);\n    }\n\n    return (\n        <>\n            <button onClick={handleQuestionAdd} >Add Question</button>\n            {questionsState.map((question: Object, index:Number) => {\n                return <Question question={question} key={index} handleQuestionRemove={handleQuestionRemove}/>\n            })}\n        </>\n    )\n}\n\nexport default SurveyQuestions;\n","import SurveyQuestions from './SurveyQuestions';\n\nconst SurveyBuilderWrapper = (props: any) => {\n    const {\n        initialValues,\n        isSubmitting,\n        setFieldValue,\n    } = props;\n\n    const onValueChange = (index: string, value: any) => {\n        setFieldValue(index, value)\n    }\n\n    const onQuestionChange = (question:Array<any>) => {\n        setFieldValue('questions', question)\n    }\n\n    return (<>\n        <div>\n            Survey Title\n            <input type=\"text\" name=\"title\" placeholder=\"Title\" defaultValue={initialValues.title} onChange={(e) => onValueChange('title', e.target.value)} />\n        </div>\n        <div>\n            Start Date\n            <input type=\"date\" name=\"startDate\" placeholder=\"Start Date\" defaultValue={initialValues.startDate} onChange={(e) => onValueChange('startDate', e.target.value)} />\n        </div>\n        <div>\n            End Date\n            <input type=\"date\" name=\"endDate\" placeholder=\"End Date\" defaultValue={initialValues.endDate} onChange={(e) => onValueChange('endDate', e.target.value)} />\n        </div>\n        <SurveyQuestions questions={initialValues.questions} onQuestionChange={onQuestionChange} />\n        <br/>\n        <br/>\n        <br/>\n        <button type=\"submit\" disabled={isSubmitting} onClick={props.handleSubmit}>Submit</button>\n    </>)\n}\n\nexport default SurveyBuilderWrapper;","import SurveyBuilder from './SurveyBuilder';\n\nexport default SurveyBuilder;","import { Formik } from 'formik';\n\nimport SurveyBuilderWrapper from \"./components/SurveyBuilderWrapper\";\n\nconst SurveyBuilder = () => {\n    return (<div>\n        This is survey builder\n        <Formik\n            initialValues={{\n                title: '',\n                startDate: '',\n                endDate: '',\n                questions: [],\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                    console.log(JSON.stringify(values, null, 2));\n                    setSubmitting(false);\n                }, 400);\n            }}\n        >\n            {(formikProps)=>{\n                return (\n                    <form >\n                        <SurveyBuilderWrapper {...formikProps}/>\n                    </form>\n                )\n            }}\n        </Formik>\n    </div>)\n};\n\nexport default SurveyBuilder;","import React from 'react';\n// import { Router as BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { Router as BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport * as routes from 'constants/routes';\nimport history from 'utils/history';\n\nimport CustomSurvey from 'components/customSurvey';\nimport SurveyBuilder from 'components/surveyBuilder';\n\n// Top level application router.\nconst Router = () => (\n  <BrowserRouter history={history}>\n    <Switch>\n      <Route exact path={routes.BUILDER} component={SurveyBuilder} />\n      <Route path={routes.HOME} component={CustomSurvey} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","import NavBar from './NavBar';\n\nexport default NavBar;","import history from \"utils/history\";\nimport * as routes from 'constants/routes';\n\nconst NavBar = () => {\n    return (\n        <div>\n            <span onClick={() => history.push(routes.BUILDER)}>Builder</span>\n            <span onClick={() => history.push(routes.HOME)}>Forms</span>\n        </div>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport './App.css';\n\nimport Router from './Router';\n\nimport NavBar from './constants/navbar'\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <Router />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}